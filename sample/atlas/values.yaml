podSecurityContext: {}
securityContext: {}
nodeSelector: {}
affinity: {}
tolerations: []
serviceAccount:
  create: true

## Service/App-name
fullnameOverride: atlas

## Namespace ##
namespace: namespace-atlas

## Replica ##
replicaCount: 1

## HPA ##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  averageUtilMem: 80
  averageUtilCpu: 80

## All Annotations ##
## Add annotation to selected resources
annotations:
  ingress:
    # "nginx.ingress.kubernetes.io/proxy-body-size": "10M"
    # "nginx.ingress.kubernetes.io/use-regex": "true"
    # "nginx.org/client-max-body-size": "10M"
  deployment: {}
  hpa: {}
  service: {}
  serviceaccount: {}
  vault:
    # "helm.sh/hook": pre-install,pre-upgrade
    # "helm.sh/hook-weight": "-10"

## in case we need hostAliases ##
hostAliases:
  enabled: true  
  iphostname:
    - ip: "8.8.8.8"
      hostnames:
      - "google.com"
    # - ip: "1.1.1.1"
    #   hostnames:
    #   - "cloudflare.com"

## Pods Lifecycle ##
gracePeriodSeconds:
  enabled: true
  value: 60

## Volumes ##
## Add google creds SA here
## google Creds names for RC is samilar with green releases
volumes: 
  # example volume from secrets
  - name: service-account
    secret:
      secretName: atlas-sa
  # example volume from pvc
  - name: data
    persistentVolumeClaim:
      claimName: volumes-pvc
volumeMounts:
  # example volume from secrets
  - name: service-account
    mountPath: /mnt
  # example volume from pvc
  - name: data
    mountPath: /data

## Migration ##
migrations:
  enabled: false
  type: init-container
    # Init Container 
    # - "cd /go/src/atlas && ./main db:migrate"
  args:
    - "echo 'Initializing Service...'"
    # - "cd /opt/atlas ; ./atlas db:migrate up"

## This is default imagePullSecret
imagePullSecrets:
  - name: "gcr-json-key"
image:
  pullPolicy: "IfNotPresent"
  repository: "asia.gcr.io/manuyafsya/atlas/apps" # {"$imagepolicy": "flux-system:apps:name"}
  tag: "1.0.0" # {"$imagepolicy": "flux-system:aggregator:tag"}

## Use interceptor to build env and run the entrypoint command (Read Dockerfile)
interceptor:
  enabled: false
  args: "echo 'test-interceptor'"

service:
  enabled: false
  type: ClusterIP
  configs:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: grpc
      port: 80
      targetPort: 8000
      protocol: TCP
    # - name: http
    #   port: 3000
    #   targetPort: 3000
    #   protocol: TCP
  # Headless to load balance grpc service that have more than one pods
  headless: false

## liveness type httpGet, exec, tcpSocket
## httpGet require path
## exec for gRPC
## tcpSocket not require path
liveness:
  port: 8000
  type: tcpSocket
  path: /
  initialDelay: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3

## check TRD to setup resource
resources: 
  limits:
    cpu: 400m
    memory: 256Mi
  requests:
    cpu: 300m
    memory: 192Mi

## Secret ##
secrets:
  configs:
    enabled: false
    autorestart:
      enabled: false
    path: pathto/configs/atlas
  creds:
    enabled: false
    autorestart:
      enabled: false
    path: pathto/creds/atlas
  additional:
    enabled: false
    name: {}

## Ingress ##
## enable disable ingress
## set true to ingress.external.enabled to enable external ingress
## you can modify ingress.rules freely
ingress:
  enabled: false
  configs:
    - ingressName: "internal"
      className: "internal-nginx"
      rules:
        - host: atlas.domain.tld
          http:
            paths:
              - path: /rc(?:\/|$)(.*)
                pathType: Prefix
                backend:
                  service:
                    name: rc-atlas
                    port:
                      number: 80
    # - ingressName: "b2b-ingress"
    #   className: "internal-nginx"
    #   rules:
    #     - host: atlas.privyinfra.id
    #       http:
    #         - path: /(.*)
    #           pathType: Prefix
    #           backend:
    #             service:
    #               name: atlas
    #               port:
    #                 number: 80
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local